# Generated by Django 3.1.2 on 2020-10-19 21:35

from django.conf import settings
import django.core.validators
from django.db import migrations, models
import django.db.models.deletion
import smart_selects.db_fields


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name='AgencyLookup',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('agency_cd', models.CharField(max_length=50, unique=True)),
                ('agency_nm', models.CharField(blank=True, max_length=150, null=True)),
                ('agency_med', models.CharField(blank=True, max_length=200, null=True)),
            ],
            options={
                'db_table': 'agency',
                'ordering': ['agency_nm'],
            },
        ),
        migrations.CreateModel(
            name='AltitudeDatumLookup',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('adatum_cd', models.CharField(max_length=10, unique=True)),
                ('adatum_desc', models.CharField(blank=True, max_length=100, null=True)),
            ],
            options={
                'db_table': 'altitude_datum',
                'ordering': ['adatum_cd'],
            },
        ),
        migrations.CreateModel(
            name='CountryLookup',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('country_cd', models.CharField(max_length=2, unique=True)),
                ('country_nm', models.CharField(max_length=48)),
            ],
            options={
                'db_table': 'country',
                'ordering': ['country_nm'],
            },
        ),
        migrations.CreateModel(
            name='HorizontalDatumLookup',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('hdatum_cd', models.CharField(max_length=10, unique=True)),
                ('hdatum_desc', models.CharField(blank=True, max_length=100, null=True)),
            ],
            options={
                'db_table': 'horizontal_datum',
                'ordering': ['hdatum_cd'],
            },
        ),
        migrations.CreateModel(
            name='NatAqfrLookup',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('nat_aqfr_cd', models.CharField(max_length=10, unique=True)),
                ('nat_aqfr_desc', models.CharField(blank=True, max_length=100, null=True)),
            ],
            options={
                'db_table': 'nat_aqfr',
                'ordering': ['nat_aqfr_desc'],
            },
        ),
        migrations.CreateModel(
            name='UnitsLookup',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('unit_id', models.IntegerField(unique=True)),
                ('unit_desc', models.CharField(blank=True, max_length=20, null=True)),
            ],
            options={
                'db_table': 'units',
                'ordering': ['unit_desc'],
            },
        ),
        migrations.CreateModel(
            name='StateLookup',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('state_cd', models.CharField(max_length=2)),
                ('state_nm', models.CharField(max_length=53)),
                ('country_cd', models.ForeignKey(db_column='country_cd', on_delete=django.db.models.deletion.PROTECT, to='registry.countrylookup', to_field='country_cd')),
            ],
            options={
                'db_table': 'state',
                'ordering': ['state_nm'],
                'unique_together': {('country_cd', 'state_cd')},
            },
        ),
        migrations.CreateModel(
            name='CountyLookup',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('county_cd', models.CharField(max_length=3)),
                ('county_nm', models.CharField(max_length=48)),
                ('country_cd', models.ForeignKey(db_column='country_cd', on_delete=django.db.models.deletion.PROTECT, to='registry.countrylookup', to_field='country_cd')),
                ('state_id', models.ForeignKey(db_column='state_id', on_delete=django.db.models.deletion.PROTECT, to='registry.statelookup')),
            ],
            options={
                'db_table': 'county',
                'ordering': ['county_nm'],
                'unique_together': {('country_cd', 'state_id', 'county_cd')},
            },
        ),
        migrations.CreateModel(
            name='MonitoringLocation',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('display_flag', models.BooleanField(default=False, verbose_name='Display Site?')),
                ('site_no', models.CharField(max_length=16, validators=[django.core.validators.RegexValidator('\\S[\\s\\S]*', message='Field must not be blank')])),
                ('site_name', models.CharField(max_length=300, validators=[django.core.validators.RegexValidator('\\S[\\s\\S]*', message='Field must not be blank')])),
                ('dec_lat_va', models.DecimalField(decimal_places=8, max_digits=11, null=True, verbose_name='Latitude(decimal degrees)')),
                ('dec_long_va', models.DecimalField(decimal_places=8, max_digits=11, null=True, verbose_name='Longitude(decimal degrees)')),
                ('horz_method', models.CharField(blank=True, max_length=300, verbose_name='Lat/Long method')),
                ('horz_acy', models.CharField(blank=True, max_length=300, verbose_name='Lat/Long accuracy')),
                ('alt_va', models.DecimalField(decimal_places=6, max_digits=10, null=True, verbose_name='Altitude')),
                ('alt_method', models.CharField(blank=True, max_length=300, verbose_name='Altitude method')),
                ('alt_acy', models.CharField(blank=True, max_length=300, verbose_name='Altitude accuracy')),
                ('well_depth', models.DecimalField(blank=True, decimal_places=7, max_digits=11, null=True)),
                ('local_aquifer_name', models.CharField(blank=True, max_length=100)),
                ('site_type', models.CharField(choices=[('WELL', 'Well'), ('SPRING', 'Spring')], max_length=10)),
                ('aqfr_type', models.CharField(blank=True, choices=[('CONFINED', 'Confined'), ('UNCONFINED', 'Unconfined')], db_column='aqfr_char', max_length=10, verbose_name='Aquifer type')),
                ('wl_sn_flag', models.BooleanField(default=False, verbose_name='In WL sub-network?')),
                ('wl_network_name', models.CharField(blank=True, db_column='wl_sys_name', max_length=50, verbose_name='WL network name')),
                ('wl_baseline_flag', models.BooleanField(default=False, verbose_name='WL baseline?')),
                ('wl_well_type', models.CharField(blank=True, choices=[('Surveillance', 'Surveillance'), ('Trend', 'Trend'), ('Special', 'Special')], max_length=32, verbose_name='WL well type')),
                ('wl_well_chars', models.CharField(blank=True, choices=[('Background', 'Background'), ('Suspected/Anticipated Changes', 'Suspected/Anticipated Changes'), ('Known Changes', 'Known Changes')], max_length=32, verbose_name='WL well characteristics')),
                ('wl_well_purpose', models.CharField(blank=True, choices=[('Dedicated Monitoring/Observation', 'Dedicated Monitoring/Observation'), ('Other', 'Other')], max_length=32, verbose_name='WL well purpose')),
                ('wl_well_purpose_notes', models.CharField(blank=True, max_length=4000, verbose_name='WL well purpose notes')),
                ('qw_sn_flag', models.BooleanField(default=False, verbose_name='In QW sub-network?')),
                ('qw_network_name', models.CharField(blank=True, db_column='qw_sys_name', max_length=50, verbose_name='QW network name')),
                ('qw_baseline_flag', models.BooleanField(default=False, verbose_name='QW baseline?')),
                ('qw_well_type', models.CharField(blank=True, choices=[('Surveillance', 'Surveillance'), ('Trend', 'Trend'), ('Special', 'Special')], max_length=32, verbose_name='QW well type')),
                ('qw_well_chars', models.CharField(blank=True, choices=[('Background', 'Background'), ('Suspected/Anticipated Changes', 'Suspected/Anticipated Changes'), ('Known Changes', 'Known Changes')], max_length=32, verbose_name='QW well characteristics')),
                ('qw_well_purpose', models.CharField(blank=True, choices=[('Dedicated Monitoring/Observation', 'Dedicated Monitoring/Observation'), ('Other', 'Other')], max_length=32, verbose_name='QW well purpose')),
                ('qw_well_purpose_notes', models.CharField(blank=True, max_length=4000, verbose_name='QW well purpose notes')),
                ('link', models.CharField(blank=True, max_length=500)),
                ('insert_date', models.DateTimeField(auto_now_add=True)),
                ('update_date', models.DateTimeField(auto_now=True)),
                ('agency', models.ForeignKey(db_column='agency_cd', null=True, on_delete=django.db.models.deletion.PROTECT, to='registry.agencylookup', to_field='agency_cd')),
                ('altitude_datum', models.ForeignKey(db_column='altitude_datum_cd', null=True, on_delete=django.db.models.deletion.PROTECT, to='registry.altitudedatumlookup', to_field='adatum_cd')),
                ('altitude_units', models.ForeignKey(db_column='altitude_units', null=True, on_delete=django.db.models.deletion.PROTECT, to='registry.unitslookup', to_field='unit_id')),
                ('country', models.ForeignKey(blank=True, db_column='country_cd', null=True, on_delete=django.db.models.deletion.PROTECT, to='registry.countrylookup', to_field='country_cd')),
                ('county', smart_selects.db_fields.ChainedForeignKey(auto_choose=True, chained_field='state', chained_model_field='state_id', db_column='county_id', null=True, on_delete=django.db.models.deletion.PROTECT, to='registry.countylookup')),
                ('horizontal_datum', models.ForeignKey(db_column='horizontal_datum_cd', null=True, on_delete=django.db.models.deletion.PROTECT, to='registry.horizontaldatumlookup', to_field='hdatum_cd')),
                ('insert_user', models.ForeignKey(editable=False, null=True, on_delete=django.db.models.deletion.PROTECT, related_name='+', to=settings.AUTH_USER_MODEL)),
                ('nat_aqfr', models.ForeignKey(db_column='nat_aqfr_cd', null=True, on_delete=django.db.models.deletion.PROTECT, to='registry.nataqfrlookup', to_field='nat_aqfr_cd', verbose_name='National aquifer')),
                ('state', smart_selects.db_fields.ChainedForeignKey(auto_choose=True, chained_field='country', chained_model_field='country_cd', db_column='state_id', null=True, on_delete=django.db.models.deletion.PROTECT, to='registry.statelookup')),
                ('update_user', models.ForeignKey(editable=False, null=True, on_delete=django.db.models.deletion.PROTECT, related_name='+', to=settings.AUTH_USER_MODEL)),
                ('well_depth_units', models.ForeignKey(blank=True, db_column='well_depth_units', null=True, on_delete=django.db.models.deletion.PROTECT, related_name='+', to='registry.unitslookup', to_field='unit_id')),
            ],
            options={
                'unique_together': {('site_no', 'agency')},
            },
        ),
    ]
